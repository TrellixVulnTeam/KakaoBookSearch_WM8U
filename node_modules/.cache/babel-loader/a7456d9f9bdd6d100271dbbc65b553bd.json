{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getBookList = createAsyncThunk(\"BOOK/GET_LIST\", async (payload, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  let result = null;\n\n  if (payload.query) {\n    try {\n      const apiUrl = 'https://dapi.kakao.com//v3/search/book';\n      result = await axios.get(apiUrl, {\n        params: {\n          query: payload.query,\n          page: payload.page,\n          size: 20\n        },\n        headers: {\n          Authorization: 'KakaoAK 7e837ff4cb969b61e048fc4f393dfc9c'\n        }\n      });\n    } catch (err) {\n      result = rejectWithValue(err.response);\n    }\n  }\n\n  return result;\n});\nexport const BookSlice = createSlice({\n  name: 'book',\n  initialState: {\n    rt: null,\n    //HTTP 상태 코드 (200, 404, 500등)\n    rtmsg: null,\n    //에러메시지\n    item: [],\n    //ajax 처리를 통해 수신된 데이터\n    loading: false\n  },\n  reducers: {},\n  extraReducers: {\n    [getBookList.pending]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return { ...state,\n        loading: true\n      };\n    },\n    [getBookList.fulfilled]: (state, _ref3) => {\n      let {\n        meta,\n        payload\n      } = _ref3;\n\n      if (meta.arg.page > 1) {\n        payload.data.documents = state.item.documents.concat(payload.data.documents);\n      }\n\n      return { ...state,\n        rt: payload.status,\n        rtmsg: payload.statusText,\n        item: payload.data,\n        loading: false\n      };\n    },\n    [getBookList.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return { ...state,\n        rt: payload !== null && payload !== void 0 && payload.status ? payload.status : '500',\n        rtmsg: payload !== null && payload !== void 0 && payload.statusText ? payload.statusText : 'Server Error',\n        item: payload.data,\n        loading: false\n      };\n    }\n  }\n});\nexport default BookSlice.reducer;","map":{"version":3,"sources":["/Users/Heejae/Hee/react_test/src/slices/BookSlice.js"],"names":["createSlice","createAsyncThunk","axios","getBookList","payload","rejectWithValue","result","query","apiUrl","get","params","page","size","headers","Authorization","err","response","BookSlice","name","initialState","rt","rtmsg","item","loading","reducers","extraReducers","pending","state","fulfilled","meta","arg","data","documents","concat","status","statusText","rejected","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getBookList = createAsyncThunk(\"BOOK/GET_LIST\", async (payload, { rejectWithValue }) => {\n    let result = null;\n\n    if (payload.query) {\n        try {\n            const apiUrl = 'https://dapi.kakao.com//v3/search/book';\n            result = await axios.get(apiUrl, {\n                params: {\n                    query: payload.query,\n                    page: payload.page,\n                    size: 20\n                },\n                headers: {Authorization: 'KakaoAK 7e837ff4cb969b61e048fc4f393dfc9c'}\n            });\n        } catch (err) {\n            result = rejectWithValue(err.response);\n        }\n    }\n    return result;\n});\n\nexport const BookSlice = createSlice({\n    name: 'book',\n    initialState: {\n        rt: null,   //HTTP 상태 코드 (200, 404, 500등)\n        rtmsg: null, //에러메시지\n        item: [], //ajax 처리를 통해 수신된 데이터\n        loading: false,\n    },\n    reducers: {},\n\n    extraReducers: {\n        [getBookList.pending]: (state, {payload}) => {\n            return {...state, loading: true};\n        },\n        [getBookList.fulfilled]: (state, {meta, payload}) => {\n            if(meta.arg.page > 1) {\n                payload.data.documents = state.item.documents.concat(payload.data.documents);\n            }\n            \n            return {\n                ...state,\n                rt: payload.status,\n                rtmsg: payload.statusText,\n                item: payload.data,\n                loading: false\n            };\n        },\n        [getBookList.rejected]: (state, {payload}) => {\n            return {\n                ...state,\n                rt: payload?.status ? payload.status: '500',\n                rtmsg: payload?.statusText ? payload.statusText : 'Server Error',\n                item: payload.data,\n                loading: false\n            };\n        }\n    }\n});\n\nexport default BookSlice.reducer;"]},"metadata":{},"sourceType":"module"}